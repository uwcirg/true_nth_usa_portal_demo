"""Remove duplicate QuestionnaireResponse POSTs

Revision ID: 2f125954b69a
Revises: 17060aa3c9d6
Create Date: 2023-02-16 17:23:16.570378

"""
from alembic import op
from io import StringIO
from sqlalchemy.sql import text

from portal.dict_tools import dict_compare

# revision identifiers, used by Alembic.
revision = '2f125954b69a'
down_revision = '17060aa3c9d6'


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    conn = op.get_bind()
    result = conn.execute(text(
        "select count(*), subject_id, questionnaire_bank_id as qb_id, "
        "qb_iteration as qb_iter, "
        "document->'questionnaire'->>'reference' as instrument, "
        "document->>'authored' as authored, status, "
        "value as study_id from questionnaire_responses join "
        "user_identifiers on user_identifiers.user_id = subject_id join "
        "identifiers on user_identifiers.identifier_id = identifiers.id "
        "where questionnaire_bank_id is not null "
        "group by subject_id, study_id, qb_id, qb_iter, instrument, authored, status "
        "having count(*) > 1 order by subject_id, authored"))

    results = result.fetchall()
    differences = StringIO()
    for r in results:
        msg = StringIO()
        msg.write(f"user {r['subject_id']} ({r['study_id']}), ")
        if r['qb_iter'] is None:
            msg.write(f" qb_id({r['qb_id']}) {r['instrument'][46:]} ")
            r2 = conn.execute(text(
                "select id, document from questionnaire_responses where "
                "subject_id=:subject_id and questionnaire_bank_id=:qb_id "
                "and qb_iteration is null and "
                "document->'questionnaire'->>'reference'=:instrument order by id"),
                subject_id=r['subject_id'],
                qb_id=r['qb_id'],
                instrument=r['instrument'])
        else:
            msg.write(f" qb_id({r['qb_id']}):qb_iteration({r['qb_iter']}) {r['instrument'][46:]} ")
            r2 = conn.execute(text(
                "select id, document from questionnaire_responses where "
                "subject_id=:subject_id and questionnaire_bank_id=:qb_id "
                "and qb_iteration=:qb_iter and "
                "document->'questionnaire'->>'reference'=:instrument order by id"),
                subject_id=r['subject_id'],
                qb_id=r['qb_id'],
                qb_iter=r['qb_iter'],
                instrument=r['instrument'])

        docs = {}
        for inner in r2.fetchall():
            docs[inner['id']] = inner['document']

        # Run comparison if two docs are found to diff
        if len(docs) == 2:
            added, removed, modified, same = dict_compare(*docs.values())
            if not any((added, removed, modified)):
                print(f"identical QNR.documents {msg.getvalue()}")
            else:
                if added:
                    raise ValueError(f"somehow, QNR added: {added}")
                if removed:
                    raise ValueError(f"somehow, QNR removed {removed}")
                if modified:
                    # If the only mod is a difference of AE session IDs,
                    # consider identical
                    if (set(modified.keys()) == set(['identifier']) and
                            modified['identifier'][0]['label'] == 'cPRO survey session ID'):
                        print(f"identical excluding AE session {msg.getvalue()}")
                    elif set(modified.keys()) == set(('identifier', 'author')):
                        print(f"identical excluding AE session and author {msg.getvalue()}")
                    else:
                        differences.write(msg.getvalue())
                        # run detailed diff on respective groups
                        keys = [i for i in docs.keys()]
                        differences.write(f" detailed differences between QNRs {keys}")
                        for i in range(len(docs[keys[0]]['group']['question'])):
                            added, removed, modified, same = dict_compare(
                                docs[keys[0]]['group']['question'][i],
                                docs[keys[1]]['group']['question'][i])
                            assert not added
                            assert not removed
                            if modified:
                                differences.write("question:" + docs[keys[0]][
                                    'group']['question'][i]['linkId'])
                                assert set(modified.keys()) == set(['answer'])
                                differences.write(f"  {modified['answer'][0]}\n")
                                differences.write(" versus")
                                differences.write(f"  {modified['answer'][1]}\n")
        else:
            raise ValueError(f"user {r['subject_id']} ({r['qb_id']}:{r['qb_iter']}) "
                             f"has {len(docs)} submissions")

    print(differences.getvalue())

    # This is a shortcut to prevent the migration system from thinking it is
    # done, so I don't have to downgrade/upgrade on every run while testing
    raise ValueError("not done")


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###
